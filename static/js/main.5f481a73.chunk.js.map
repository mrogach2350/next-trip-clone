{"version":3,"sources":["utils/styleConstants.js","components/routesList.js","components/directionButtons.js","components/stopsList.js","containers/rootContainer.js","utils/apiCalls.js","App.js","serviceWorker.js","index.js"],"names":["header","backgroundColor","color","margin","padding","styles","root","textAlign","withStyles","_ref","_ref$classes","classes","_ref$routes","routes","_ref$currentRoute","currentRoute","_ref$onSelectRoute","onSelectRoute","_ref$history","history","currentRouteData","find","x","Route","react_default","a","createElement","index_es","className","onClick","push","style","maxHeight","overflow","map","route","idx","button","selected","key","Description","display","flexDirection","alignItems","justifyContent","paper","_ref$directions","directions","_ref$currentDirection","currentDirection","_ref$onSelectDirectio","onSelectDirection","direction","variant","Value","Text","_ref$stops","stops","stop","value","RootContainer","_React$PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","concat","state","defaultProvider","providers","currentProvider","inherits","createClass","_this2","axios","get","then","results","setState","data","filteredRoutes","filter","ProviderID","prevProps","prevState","_this3","prevParams","queryString","parse","location","search","params","r","routeNumber","arguments","length","undefined","fetchDirections","result","d","fetchStops","_this$state","container","item","xs","md","md-offset","routesList","directionButtons","stopsList","React","PureComponent","App","react_router_dom","react_router","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f481a73.chunk.js","sourcesContent":["export const header = {\n  backgroundColor: 'blue', \n  color: 'white', \n  margin: 0, \n  padding: '20px',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Paper, List, ListItem } from '@material-ui/core'\nimport { header } from '../utils/styleConstants'\n\nconst styles = {\n  header,\n  root: { \n    margin: '20px', \n    textAlign: 'center', \n  }\n}\n\nexport const RoutesList = ({ \n  classes = {},\n  routes = [], \n  currentRoute = '', \n  onSelectRoute = () => {},\n  history = {},\n}) => {\n  const currentRouteData = routes.find(x => x.Route === currentRoute)\n  return (\n    <Paper className={classes.root}>\n      <h1 onClick={() => history.push('/')} className={classes.header}>Routes</h1>\n      {currentRoute === '' ?\n        <List style={{ maxHeight: '500px', overflow: 'scroll' }}>\n          {routes.map((route, idx) => \n            <ListItem \n              button\n              onClick={() => onSelectRoute(route.Route)}\n              selected={currentRoute === route.Route}\n              key={idx}\n            >\n              {route.Description}\n            </ListItem>\n          )}\n        </List>:\n        <h4 style={{ padding: '15px', margin: 0 }}>\n          {currentRouteData.Description}\n        </h4>\n      }\n    </Paper> \n  )\n} \n\nRoutesList.propTypes = {\n  classes: PropTypes.object,\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      Route: PropTypes.string,\n      Description: PropTypes.string,\n    })\n  ),\n  currentRoute: PropTypes.string,\n  onSelectRoute: PropTypes.func,\n  history: PropTypes.object,\n}\n\nexport default withStyles(styles)(RoutesList)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Paper, Button } from '@material-ui/core'\nimport { header } from '../utils/styleConstants'\n\nconst styles = {\n  root: { \n    margin: '20px', \n    display: 'flex', \n    flexDirection: 'row', \n    alignItems: 'center',\n    justifyContent: 'center' \n  },\n  button: {\n    margin: '10px',\n  },\n  header,\n  paper: { \n    margin: '20px', \n    textAlign: 'center', \n  }\n}\n\nexport const DirectionButtons = ({ \n    classes = {},\n    directions = [], \n    currentDirection = '', \n    onSelectDirection = () => {} \n  }) => \n    <Paper className={classes.paper}>\n      <h1 className={classes.header}>Direction</h1>\n      <div className={classes.root}>\n        {directions.map((direction, idx) => \n          <Button \n            key={idx}\n            className={classes.button}\n            variant=\"contained\" \n            color={currentDirection === direction.Value ? \"primary\" : \"default\"}\n            onClick={() => onSelectDirection(direction.Value)}\n          >\n            {direction.Text}\n          </Button>\n        )}\n      </div>\n    </Paper>\n\nDirectionButtons.propTypes = {\n  classes: PropTypes.object,\n  directions: PropTypes.arrayOf(\n    PropTypes.shape({\n      Value: PropTypes.string,\n      Text: PropTypes.string,\n    })\n  ),\n  currentDirection: PropTypes.string,\n  onSelectDirection: PropTypes.func,\n}\n\nexport default withStyles(styles)(DirectionButtons)","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Paper, List, ListItem } from '@material-ui/core'\nimport { header } from '../utils/styleConstants'\n\nconst styles = {\n  header,\n}\n\nexport const StopsList = ({ stops = [], classes = {} }) => {\n  return (\n    <Paper style={{ margin: '20px', textAlign: 'center' }}>\n      <h1 className={classes.header}>Stops</h1>\n      <List style={{ maxHeight: '500px', overflow: 'scroll' }}>\n        {stops.map((stop, idx) => \n          <ListItem \n            value={stop.Value} \n            key={idx}\n          >\n            {stop.Text}\n          </ListItem>\n        )}\n      </List>\n    </Paper>\n  )\n}\n\nexport default withStyles(styles)(StopsList)","import React from 'react'\nimport queryString from 'query-string'\nimport { Grid } from '@material-ui/core'\n\nimport RoutesList from '../components/routesList'\nimport DirectionButtons from '../components/directionButtons'\nimport StopsList from '../components/stopsList'\nimport { fetchProviders, fetchRoutes, fetchDirections, fetchStops } from '../utils/apiCalls'\n\nexport class RootContainer extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      defaultProvider: '8',\n      providers: [],\n      routes: [],\n      directions: [],\n      stops: [],\n      currentProvider: '8',\n      currentRoute: '',\n      currentDirection: '',\n    }\n  }\n\n  componentDidMount() {\n    const { currentProvider } = this.state\n    fetchProviders().then(results => this.setState({ providers: results.data }))\n    fetchRoutes().then(results => {\n      const filteredRoutes = results.data.filter(x => x.ProviderID === currentProvider)\n      this.setState({ routes: filteredRoutes })\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevParams = queryString.parse(prevProps.location.search)\n    const params = queryString.parse(this.props.location.search)\n\n    if (params.r !== prevParams.r) {\n      if(!params.r) {\n        return this.setState({ \n          currentRoute: '', \n          currentDirection: '',\n          directions: [], \n          stops: [] \n        })\n      }\n\n      return fetchDirections(params.r).then(result => {\n        const directions = result.data\n        this.setState({ currentRoute: params.r, directions })\n      }) \n    }\n\n    if (params.d !== prevParams.d) {\n      if(!params.d) {\n        return this.setState({ currentDirection: '', stops: [] })\n      }\n\n      return fetchStops(params.r, params.d).then(result => {\n        const stops = result.data\n        this.setState({ currentDirection: params.d, stops })\n      })\n    }\n  }\n\n  onSelectRoute = (currentRoute) => {\n    const { history } = this.props\n    history.push(`?r=${currentRoute}`)\n  }\n\n  onSelectDirection = (currentDirection) => {\n    const { history } = this.props\n    const { currentRoute } = this.state\n    history.push(`?r=${currentRoute}&d=${currentDirection}`)\n  }\n\n  render() {\n    const { history } = this.props\n    const { routes, currentRoute, directions, currentDirection, stops } = this.state\n    return (\n      <Grid \n        container\n      >\n        <Grid item xs={false} md={1} />\n        <Grid item xs={12} md={5} md-offset={1}>\n          {routes.length > 0 &&\n            <RoutesList \n              history={history}\n              routes={routes}\n              currentRoute={currentRoute}\n              onSelectRoute={this.onSelectRoute}\n            /> \n          }\n          {directions.length > 0 &&\n            <DirectionButtons \n              directions={directions}\n              currentDirection={currentDirection}\n              onSelectDirection={this.onSelectDirection}\n            />\n          }\n        </Grid> \n        <Grid item xs={12} md={5}>\n          {stops.length > 0 &&\n            <StopsList stops={stops} />\n          }\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default RootContainer","import axios from 'axios'\n\nexport const fetchProviders = () => axios.get('http://svc.metrotransit.org/NexTrip/Providers?format=json')\n\nexport const fetchRoutes = () => axios.get('http://svc.metrotransit.org/NexTrip/Routes?format=json')\n\nexport const fetchDirections = (routeNumber = 0) => \n  axios.get(`http://svc.metrotransit.org/NexTrip/Directions/${routeNumber}?format=json`)\n\nexport const fetchStops = (routeNumber = 0, direction = 0) => \n  axios.get(`http://svc.metrotransit.org/NexTrip/Stops/${routeNumber}/${direction}?format=json`)\n\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport RootContainer from './containers/rootContainer'\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={RootContainer} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}